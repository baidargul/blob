generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model product {
  id              String            @id @default(uuid())
  name            String
  cost            Decimal?          @db.Decimal
  price           Decimal?          @db.Decimal
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  brandId         String?
  categoryId      String?
  typeId          String?
  barcodeRegister barcodeRegister[]
  brand           brand?            @relation(fields: [brandId], references: [id], onDelete: Cascade)
  category        category?         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  type            type?             @relation(fields: [typeId], references: [id], onDelete: Cascade)
  productImages   productImages[]
}

model images {
  id            String          @id @default(uuid())
  name          String?
  extension     String?
  width         Decimal?        @db.Decimal
  height        Decimal?        @db.Decimal
  url           String?
  sizeInBytes   Decimal?
  productImages productImages[]
}

model productImages {
  id        String  @id @default(uuid())
  productId String
  imageId   String
  images    images  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model brand {
  id          String    @id @default(uuid())
  name        String    @unique
  phone1      String?
  phone2      String?
  address1    String?
  address2    String?
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now())
  product     product[]
}

model category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now())
  product     product[]
}

model type {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now())
  product     product[]
}

model barcodeRegister {
  id               String             @id @default(uuid())
  productId        String
  color            String?
  cost             Decimal?           @default(0) @db.Decimal
  invoice          Decimal?           @default(0) @db.Decimal
  barcode          String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  product          product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  purchaseRegister purchaseRegister[]
}

model purchase {
  id               String             @id @default(uuid())
  purhcaseDate     DateTime?          @default(now())
  vendorId         String?
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @default(now())
  purchaseRegister purchaseRegister[]
}

model purchaseRegister {
  id               String          @id @default(uuid())
  barodeRegisterId String
  purchaseId       String
  barcodeRegister  barcodeRegister @relation(fields: [barodeRegisterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchase         purchase        @relation(fields: [purchaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
