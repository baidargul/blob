generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model product {
  id              String            @id @default(uuid())
  name            String
  cost            Decimal?          @db.Decimal
  price           Decimal?          @db.Decimal
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  brandId         String?
  categoryId      String?
  typeId          String?
  barcodeRegister barcodeRegister[]
  brand           brand?            @relation(fields: [brandId], references: [id], onDelete: Cascade)
  category        category?         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  type            type?             @relation(fields: [typeId], references: [id], onDelete: Cascade)
  productImages   productImages[]
}

model images {
  id            String          @id @default(uuid())
  name          String?
  extension     String?
  width         Decimal?        @db.Decimal
  height        Decimal?        @db.Decimal
  url           String?
  sizeInBytes   Decimal?
  productImages productImages[]
}

model productImages {
  id        String  @id @default(uuid())
  productId String
  imageId   String
  images    images  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model brand {
  id          String    @id @default(uuid())
  name        String    @unique
  phone1      String?
  phone2      String?
  address1    String?
  address2    String?
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now())
  product     product[]
}

model category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?   @default("")
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now())
  product     product[]
}

model type {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now())
  product     product[]
}

model barcodeRegister {
  id         String      @id @default(uuid())
  productId  String
  color      String?
  cost       Decimal?    @default(0) @db.Decimal
  invoice    Decimal?    @default(0) @db.Decimal
  barcode    String?     @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  purchaseId String
  product    product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  purchase   purchase    @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  inventory  inventory[]
}

model purchase {
  id              String            @id @default(uuid())
  vendorId        String?
  createdAt       DateTime?         @default(now())
  updatedAt       DateTime?         @default(now())
  orderNo         Int               @default(autoincrement())
  closed          Boolean?          @default(false)
  purchaseDate    DateTime?         @default(now())
  barcodeRegister barcodeRegister[]
  vendor          vendor?           @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model inventory {
  id                String          @id @default(uuid())
  barcodeRegisterId String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
  barcodeRegister   barcodeRegister @relation(fields: [barcodeRegisterId], references: [id], onDelete: Cascade)
}

model vendor {
  id              String     @id @default(uuid())
  name            String     @unique
  code            String?
  accountId       String?
  createdAt       DateTime?  @default(now()) @db.Date
  primaryContact  String?
  primaryPosition String?
  primaryPhone    String?
  secondContact   String?
  secondPosition  String?
  secondPhone     String?
  email1          String?
  email2          String?
  website         String?
  purchase        purchase[]
  account         account?   @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model customer {
  id              String    @id @default(uuid())
  name            String    @unique
  code            String?
  accountId       String?
  createdAt       DateTime? @default(now()) @db.Date
  primaryContact  String?
  primaryPosition String?
  primaryPhone    String?
  secondContact   String?
  secondPosition  String?
  secondPhone     String?
  email1          String?
  email2          String?
  website         String?
  account         account?  @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sale {
  id        String    @id @default(uuid())
  orderNo   Decimal?  @db.Decimal
  closed    Boolean?
  saleDate  DateTime? @default(now()) @db.Date
  createdAt DateTime? @default(now()) @db.Date
  updatedAt DateTime? @default(now()) @db.Date
  accountId String?
}

model account {
  id          String       @id @default(uuid())
  title       String
  balance     Decimal?     @default(0) @db.Decimal
  createdAt   DateTime?    @default(now()) @db.Date
  updatedAt   DateTime?    @default(now()) @db.Date
  type        accountType?
  description String?
  customer    customer[]
  vendor      vendor[]
}

model transactions {
  id                    String              @id @default(uuid())
  accountId             String
  type                  transactionType
  amount                Decimal             @db.Decimal
  createdAt             DateTime            @default(now())
  transactionCategoryId String
  category              transactionCategory @relation(fields: [transactionCategoryId], references: [id])
}

model transactionCategory {
  id           String         @id @default(uuid())
  name         String         @unique
  description  String?
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @default(now())
  transactions transactions[]
}

enum accountType {
  vendor
  customer
  owner
  employee
  bank
  cash
  expenses
  income
}

enum transactionType {
  debit
  credit
}
